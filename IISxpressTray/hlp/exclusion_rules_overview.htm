<HTML>
<HEAD>
<META NAME="GENERATOR" Content="Microsoft Visual Studio 8.0">
<link rel="stylesheet" type="text/css" href="default.css">
<script language="javascript" src="PageUtils.js"></script>
<TITLE></TITLE>
</HEAD>
<BODY>

<OBJECT TYPE="application/x-oleobject" CLASSID="clsid:1e2a7bd0-dab9-11d0-b93a-00c04fc99f9e" VIEWASTEXT ID="Object1">
	<PARAM NAME="Keyword" VALUE="Exclusion Rules">
	<PARAM NAME="Keyword" VALUE="Rules">	
</OBJECT>

<script language="javascript">PageHeader("Exclusion Rules");</script>

<div class="paragraphheading">Request/Response Properties</div>

<p>
A request made to a web server is usually mapped to a file on the web server's file system. For example,
the request http://www.ripcordsoftware.com/index.htm instructs the web server to send the contents
of the file index.htm to the client. We therefore use the response/file terminology interchangably, 
since usually they are one and the same. This also applies to dynamic content where the source file 
is used to generate the response content - the ultimate source of the data is the file on the web server's
hard disk.
</p>

<div>
The index.htm file in the example above would have the following properties:
</div>
<ul class="squareitem">
<li>Extension: htm</li>
<li>Content type: text/html</li>
<li>URI: /</li>
<li>Client address: the IP address of the client making the request</li>
</ul>

<p>
A response generated by an ASPX file has the same set of properties, however while the extension and URI 
are constant for all responses the contents may not be.
</p>

<p>
<img src="images\finger_pointing.png" />
These properties apply to all request/responses and therefore form the basis of IISxpress's exclusion model.
</p>

<div class="paragraphheading">Using Exclusion Rules</div>

<p>
Unlike the built in IIS compression, IISxpress assumes all responses should be compressed. So, if 
you don't want a specific type of response to be compressed you need to configure IISxpress to 
exclude it.
</p>

<p>
Fortunately IISxpress includes a powerful rule engine which allows you to configure, tune and tweak your
web server for maximum performance.
</p>

<p>
Exclusion rules are applied as follows:
</p>

<ul class="squareitem">
<li>
	IISxpress checks whether is has compressed this file before. If the compression 
	was not successful last time then IISxpress will not attempt to compress it again, 
	the uncompressed data will be returned.
</li>
<li>
    IISxpress checks to see if the request came from the local computer. If it did 
    it does not compress the response (since this will always be slower than returning
    the original data). You can override this behaviour.
</li>
<li>
	IISxpress checks whether the file extension requested is in the exclusion list. 
	If it is then the uncompressed data will be returned.
</li>
<li>
	IISxpress checks whether the content type returned is in the exclusion list. If 
	it is then the uncompressed data will be returned.
</li>
<li>
	IISxpress checks whether the path to the returned file is in the URI 
	exclusion list. If it is then the uncompressed data will be returned.
</li>
<li>
	IISxpress checks to see if the IP address of the computer that made the request is 
	on the Network exclusion list. If it is then the uncompressed data will be
	returned.
</li>
<li>
	IISxpress checks to see if the client User Agent string can be matched with
	an excluded User Agent string. If it is then the uncompressed data will be
	returned.
</li>
</ul>

<p>
Only now will IISxpress compress the response. If the compression results in a 
smaller response it will send that to the client, otherwise it sends the 
uncompressed data. IISxpress will update it's history database with the result of the 
compression so that next time it will know whether to attempt compression or not.
</p>

<p>
<img src="images\finger_pointing.png" />
Don't worry if this seems complicated, ultimately if IISxpress tries to 
compress a response and it can't reduce the size then it will not try to again, 
saving CPU time and system resources.
</p>

<span class="seealso">See also</span><br/>
<a href="exclude_by_extension.htm">Exclude by Extension</a><br/>
<a href="exclude_by_contenttype.htm">Exclude by Content Type</a><br/>
<a href="exclude_by_uri.htm">Exclude by URI</a><br/>
<a href="exclude_by_ipaddress.htm">Exclude by Network (IP) Address</a><br/>
<a href="exclude_by_useragent.htm">Exclude by User Agent</a><br/>

<script language="javascript">PageFooter();</script>

</BODY>
</HTML>
